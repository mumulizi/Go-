struct
struct类型是值类型
	定义的三种形式
	1、var stu Student
	2、var stu *Student = new(Student)
	3、var stu *Student =&Student{}
	其中2、3返回的是指向结构体的指针，访问形式如下
		stu.Name 或者(*stu).Name 星号可省略 
	
	内存布局，struct中的所有字段在内存是连续的
	
	链表
		每个节点包含下一个节点的地址，这样把所有的节点串起来，通常把链表中的第一个节点叫做链表头
		定义
			type Student struct {
				Name string
				Next *Student
			}
			
	type Stu Student  这是别名把Student别名Stu,但属于不同的类型
	
	
	再次强调
		make用来创建map/slice/channel
		new用来创建值类型
		
	tag
		我们可以为struct中的每个字段写上一个tag，这个tag可以通过反射的机制获取，最常用的场景就是json序列化和反序列化
	
	
	结构体字段中可以没用名字或者类型，即匿名字段
	
	方法
		go中的方法是作用在特定类型的变量上，因此自定义类型，都可以有方法，而不仅仅是struct
		定义：func (recevier type) methodName(参数列表)(返回值列表){}
		调用方法： variable.function(参数列表)
		继承：
			如果一个struct嵌套了另一个匿名结构体，那么这个结构体可以直接访问匿名结构体的方法，从而实现继承
		组合：
			如果一个struct嵌套了另一个有名的结构体，那么这个模式叫组合
		多重继承
			如果一个struct嵌套了多个匿名结构体，那么这个结构可以直接访问多个匿名结构体的方法，从而实现多重继承
	
	
	接口
		定义：interface类型可以定义一组方法，但是这些不需要实现，不能包含任何变量
		type example interface{
			Method1(参数列表)返回值列表
			Method2(参数列表)返回值列表
		}
		var a example
		a.Method1()
		
		
		接口补充
		  注意事项：
			1：接口本身不能创建实例，但是可以指向一个实现了该接口的自定义类型的变量（实例）
			2：接口中所有的方法都没有方法体，即都是没有实现的方法
			3：在Go中，一个自定义类型需要将某个接口的所有方法都实现，我们说这个自定义类型实现了该接口
			4：一个自定义类型只有实现了某个接口，才能将该自定义类型的实例（变量）赋给接口类型
			5：只要是自定义数据类型，就可以实现接口，不仅仅是结构体类型
			
	